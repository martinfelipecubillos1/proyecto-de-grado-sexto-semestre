{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "name": "Tu primera red neuronal en Python y Tensorflow",
      "provenance": [],
      "include_colab_link": true
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "view-in-github",
        "colab_type": "text"
      },
      "source": [
        "<a href=\"https://colab.research.google.com/github/martinfelipecubillos1/proyecto-de-grado-sexto-semestre/blob/main/Practica%20Red%20Neuronal%20Cindy\" target=\"_parent\"><img src=\"https://colab.research.google.com/assets/colab-badge.svg\" alt=\"Open In Colab\"/></a>"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "wORP2sgwyMHU"
      },
      "source": [
        "**Red neuronal por Cindy Jireh Gianine Pachon del grupo 801**"
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "ibTcShXI13v7"
      },
      "source": [
        "*Red entrenada para determinar el valor que toman los kilometros en millas*"
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "Hy_pAhzDZ4gy"
      },
      "source": [
        "import tensorflow as tf\n",
        "import numpy as np"
      ],
      "execution_count": 42,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "MIrfX72vaL1z"
      },
      "source": [
        "Millas = np.array([0.621371, 6.21371,15.5343, 31.0686, 62.1371, 124.274, 310.686], dtype=float)\n",
        "Kilometros = np.array([1, 10, 25, 50, 100, 200, 500], dtype=float)"
      ],
      "execution_count": 43,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "RIG6Y5jEafFL"
      },
      "source": [
        "#capa_superior = tf.keras.layers.Dense(units=1, input_shape=[1])\n",
        "#modelo = tf.keras.Sequential([capa_superior])\n",
        "\n",
        "Capa_oculta1 = tf.keras.layers.Dense(units=3, input_shape=[1])\n",
        "Capa_oculta2 = tf.keras.layers.Dense(units=3)\n",
        "Capa_Final = tf.keras.layers.Dense(units=1)\n",
        "modelo = tf.keras.Sequential([Capa_oculta1, Capa_oculta2, Capa_Final])"
      ],
      "execution_count": 44,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "id": "1_WHzWidbN_8"
      },
      "source": [
        "modelo.compile(\n",
        "    optimizer=tf.keras.optimizers.Adam(0.1),\n",
        "    loss='mean_squared_error'\n",
        ")"
      ],
      "execution_count": 45,
      "outputs": []
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "4D-NuUTnbabR",
        "outputId": "3a3dd2e5-4063-4909-864f-09ab04d4e73c"
      },
      "source": [
        "print(\"Comenzando entrenamiento...\")\n",
        "historial = modelo.fit(Kilometros, Millas, epochs=1000, verbose=False)\n",
        "print(\"Se entreno el modelo!\")"
      ],
      "execution_count": 46,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Comenzando entrenamiento...\n",
            "Se entreno el modelo!\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/",
          "height": 296
        },
        "id": "px43cF3Nb3mG",
        "outputId": "a22ac167-87df-412c-e30d-09ded0a0f0a9"
      },
      "source": [
        "import matplotlib.pyplot as plt\n",
        "plt.xlabel(\"# Epoca\")\n",
        "plt.ylabel(\"Magnitud de p√©rdida\")\n",
        "plt.plot(historial.history[\"loss\"])"
      ],
      "execution_count": 47,
      "outputs": [
        {
          "output_type": "execute_result",
          "data": {
            "text/plain": [
              "[<matplotlib.lines.Line2D at 0x7fcbf5e7a7d0>]"
            ]
          },
          "metadata": {},
          "execution_count": 47
        },
        {
          "output_type": "display_data",
          "data": {
            "image/png": "\n",
            "text/plain": [
              "<Figure size 432x288 with 1 Axes>"
            ]
          },
          "metadata": {
            "needs_background": "light"
          }
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "esVvhzjMcV9f",
        "outputId": "f628af12-3ba9-448a-d890-b7a5181a9e12"
      },
      "source": [
        "print(\"Hagamos una predicci√≥n de kilometros a millas!\")\n",
        "resultado = modelo.predict([75])\n",
        "print(\"El resultado es \" + str(resultado) + \" Millas\")"
      ],
      "execution_count": 51,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Hagamos una predicci√≥n de kilometros a millas!\n",
            "El resultado es [[46.602837]] Millas\n"
          ]
        }
      ]
    },
    {
      "cell_type": "code",
      "metadata": {
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "id": "FVDejrBgcokc",
        "outputId": "752883d9-7a71-4477-efff-fad6a12564da"
      },
      "source": [
        "print(\"Variables internas del modelo\")\n",
        "#print(capa_superior.get_weights())\n",
        "print(Capa_oculta1.get_weights())\n",
        "print(Capa_oculta2.get_weights())\n",
        "print(Capa_Final.get_weights())"
      ],
      "execution_count": 52,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Variables internas del modelo\n",
            "[array([[0.90535265, 0.57287997, 0.0535489 ]], dtype=float32), array([-0.27679524, -0.3560418 ,  0.3463389 ], dtype=float32)]\n",
            "[array([[-0.09148712, -0.63631296,  0.73887724],\n",
            "       [ 0.44024214, -0.62741303, -0.07805083],\n",
            "       [ 0.17237884, -0.36393383, -0.7886757 ]], dtype=float32), array([-0.12386499,  0.02433966, -0.07517616], dtype=float32)]\n",
            "[array([[ 0.01316634],\n",
            "       [-0.42351985],\n",
            "       [ 0.368653  ]], dtype=float32), array([0.3222099], dtype=float32)]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "metadata": {
        "id": "SMqL2Gfi2FaO"
      },
      "source": [
        "*Referencia para el desarrollo de la codificaci√≥n: (https://www.youtube.com/watch?v=iX_on3VxZzk)*"
      ]
    }
  ]
}